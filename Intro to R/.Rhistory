# Create a new column called visitNo, the divides the VisitID to extract the unique character to give the visit time which is the 4th index
mutate(visitNo = str_sub (VisitID, 4, 5))|>
# group the data by calfID
group_by(CalfID) |>
# Create a new column to display the max and min weights of the calf
mutate(max_weight = max(Weight, na.rm = TRUE)) |># Maximum Weight
mutate(min_weight = min(Weight, na.rm = TRUE)) |># Minimum Weight
# Good practice
ungroup() |>
# Grouping the test using if else
mutate(ManualPCV = ifelse(ManualPCV < 30, "Negative", "Positive")) |>
mutate(Theileria.spp.= ifelse(Theileria.spp. == 1, "Positive", "Negative")) |>
mutate(ELISA_mutans = ifelse(ELISA_mutans == 1, "Positive", "Negative")) |>
mutate(ELISA_parva = ifelse(ELISA_parva == 1, "Positive", "Negative")) |>
#mutate_all(vars(Theileria.spp., ELISA_mutans,ELISA_parva), funs(ifelse(.==1,"Positive, "Negative")))|>
mutate(Q.Strongyle.eggs = ifelse(Q.Strongyle.eggs < 700, "Negative", "Positive"))
# create a new object with 2 rows and remove the duplicates leaving only 30 calf IDs
max_weight <- ideal3 |>
select(CalfID, max_weight) |>
distinct()
ggplot(max_weight, aes(x = max_weight)) + geom_histogram()
# Transpose data : to long column
max_weight <- ideal3 |>
select(CalfID, ManualPCV, Theileria.spp., ELISA_mutans, ELISA_parva, Q.Strongyle.eggs) |>
pivot_longer(c( ManualPCV, Theileria.spp., ELISA_mutans, ELISA_parva, Q.Strongyle.eggs),names_to = "Tests", values_to = "Results") |>
group_by(tests, results)|>
summarise(count = n())
# Transpose data : to long column
calf_tests <- ideal3 |>
select(CalfID, ManualPCV, Theileria.spp., ELISA_mutans, ELISA_parva, Q.Strongyle.eggs) |>
pivot_longer(c( ManualPCV, Theileria.spp., ELISA_mutans, ELISA_parva, Q.Strongyle.eggs),names_to = "Tests", values_to = "Results") |>
group_by(Tests, Results)|>
summarise(count = n())
calf_tests
# Transpose data : to long column
calf_tests <- ideal3 |>
select(CalfID, ManualPCV, Theileria.spp., ELISA_mutans, ELISA_parva, Q.Strongyle.eggs) |>
pivot_longer(c( ManualPCV, Theileria.spp., ELISA_mutans, ELISA_parva, Q.Strongyle.eggs),names_to = "Tests", values_to = "Results") |>
group_by(Tests, Results)|>
summarise(count = n()) |>
na.omit()
ggplot(calf_tests, aes(x = Results, y=count, fill = Tests)) + geom_col()
ggplot(calf_tests, aes(x = Tests, y=count, fill = Results)) + geom_col()
View(ideal2)
View(ideal2)
calf_tests
# Transpose data : to long column
calf_tests <- ideal3 |>
select(CalfID, ManualPCV, Theileria.spp., ELISA_mutans, ELISA_parva, Q.Strongyle.eggs) |>
pivot_longer(c( ManualPCV, Theileria.spp., ELISA_mutans, ELISA_parva, Q.Strongyle.eggs),names_to = "Tests", values_to = "Results") |>
group_by(Tests, Results)|>
summarise(count = n()) |>
na.omit()|>
ungroup()|>
# find the percentages of the counts with reference to the total number of +ves and  -ves
group_by(tests)|>
#create a new column called total to get the sum of the counts
mutate(Total = sum(count))
# Transpose data : to long column
calf_tests <- ideal3 |>
select(CalfID, ManualPCV, Theileria.spp., ELISA_mutans, ELISA_parva, Q.Strongyle.eggs) |>
pivot_longer(c( ManualPCV, Theileria.spp., ELISA_mutans, ELISA_parva, Q.Strongyle.eggs),names_to = "Tests", values_to = "Results") |>
group_by(Tests, Results)|>
summarise(count = n()) |>
na.omit()|>
ungroup()|>
# find the percentages of the counts with reference to the total number of +ves and  -ves
group_by(Tests)|>
#create a new column called total to get the sum of the counts
mutate(Total = sum(count))
# Transpose data : to long column
calf_tests <- ideal3 |>
select(CalfID, ManualPCV, Theileria.spp., ELISA_mutans, ELISA_parva, Q.Strongyle.eggs) |>
pivot_longer(c( ManualPCV, Theileria.spp., ELISA_mutans, ELISA_parva, Q.Strongyle.eggs),names_to = "Tests", values_to = "Results") |>
group_by(Tests, Results)|>
summarise(count = n()) |>
na.omit()|>
ungroup()|>
# find the percentages of the counts with reference to the total number of +ves and  -ves
group_by(Tests)|>
#create a new column called total to get the sum of the counts
mutate(Total = sum(count))|>
ungroup() |>
# we divide the count and total. To find the percentage and put it in a new column called Propotion
mutate(Proportion = count / Total * 100)
# Transpose data : to long column
calf_tests <- ideal3 |>
select(CalfID, ManualPCV, Theileria.spp., ELISA_mutans, ELISA_parva, Q.Strongyle.eggs) |>
pivot_longer(c( ManualPCV, Theileria.spp., ELISA_mutans, ELISA_parva, Q.Strongyle.eggs),names_to = "Tests", values_to = "Results") |>
group_by(Tests, Results)|>
summarise(count = n()) |>
na.omit()|>
ungroup()|>
# find the percentages of the counts with reference to the total number of +ves and  -ves
group_by(Tests)|>
#create a new column called total to get the sum of the counts
mutate(Total = sum(count))|>
ungroup() |>
# we divide the count and total. To find the percentage and put it in a new column called Proportion
#Add round to the nearest whole number
mutate(Proportion = round(count / Total * 100))
ggplot(calf_tests, aes(x = prop, y=Tests, fill = Results)) + geom_col()
ggplot(calf_tests, aes(x = Proportion, y=Tests, fill = Results)) + geom_col()
# TASK 1
install.packages("AMR")
library("AMR")
#Import data
data("WHONET")
force(WHONET)
force(WHONET)
View(WHONET)
View(WHONET)
#Filter the data for the Netherlands
filter(Country == "The Netherlands")
#Filter the data for the Netherlands
filter(country == "The Netherlands")
filer()
filter()
?filter()
?filter
#Import data
data("WHONET") |>
#Filter the data for the Netherlands
filter(country == "The Netherlands")
#Create a new object
AMR_data <- WHONET |>
#Filter the data for the Netherlands
filter(country == "The Netherlands")
#Create a new object
AMR_data <- WHONET |>
filter(country == "The Netherlands")
#Create a new object
AMR_data <- WHONET |>
filter(Country == "The Netherlands")
View(AMR_data)
View(AMR_data)
#Create a new object
amr_data <- WHONET |>
filter(Country == "The Netherlands")
View(AMR_data)
View(amr_data)
View(amr_data)
#Create a new object and filter(country == "The Netherlands")
amr_data <- WHONET |>
filter(Country == "The Netherlands") |>
select(AMP_ND10, AMC_ED20, TZP_ED30, PEN_ND1, CIP_ED5)
View(AMR_data)
#Create a new object and filter(country == "The Netherlands")
amr_data <- WHONET |>
filter(Country == "The Netherlands") |>
select(Specimen type, AMP_ND10, AMC_ED20, TZP_ED30, PEN_ND1, CIP_ED5)
#Create a new object and filter(country == "The Netherlands")
amr_data <- WHONET |>
filter(Country == "The Netherlands") |>
select(`Specimen type`, AMP_ND10, AMC_ED20,TZP_ED30, PEN_ND1, CIP_ED5)
#Create a new object and filter(country == "The Netherlands")
amr_data <- WHONET |>
filter(Country == "The Netherlands") |>
select(`Specimen type`, AMP_ND10, AMC_ED20,TZP_ED30, PEN_ND1, CIP_ED5)|>
rename("ampicillin" = "AMP_ND10", "amoxicillin" = "AMC_ED20","piperacillin" = "ZP_ED30", "benzylpenicillin" = "PEN_ND1", "ciprofloxacin vi" = "CIP_ED5")
#Create a new object and filter(country == "The Netherlands")
amr_data <- WHONET |>
filter(Country == "The Netherlands") |>
select(`Specimen type`, AMP_ND10, AMC_ED20,TZP_ED30, PEN_ND1, CIP_ED5)|>
rename("ampicillin" = "AMP_ND10", "amoxicillin" = "AMC_ED20","piperacillin" = "TZP_ED30", "benzylpenicillin" = "PEN_ND1", "ciprofloxacin vi" = "CIP_ED5")
#Import data
data("WHONET")
View(AMR_data)
rm(AMR_data)
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "Antibiotics", values_to = "Susc_Tests")
View(spec_tests)
View(spec_tests)
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "Antibiotics", values_to = "Susc_Tests")|>
group_by(Antibiotics, Susc_Tests)
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "Antibiotics", values_to = "Susc_Tests")
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "Antibiotics", values_to = "Susc_Tests")|>
group_by(Antibiotics, Susc_Tests)
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "Antibiotics", values_to = "Susc_Tests")
mutate()
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "Antibiotics", values_to = "Susc_Tests")
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "Biotics", values_to = "Tests")
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(`Specimen type`,ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(`Specimen type`,ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "Biotics", values_to = "Tests")
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(`Specimen type`,ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "Biotics", values_to = "Tests")|>
na.omit()
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(`Specimen type`,ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "biotics", values_to = "tests")
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(`Specimen type`,ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "biotics", values_to = "tests")
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(`Specimen type`,ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "biotics", values_to = "tests")|>
na.omit()
group_by(biotics, tests)
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(`Specimen type`,ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "biotics", values_to = "sensitivity")|>
na.omit()|>
group_by(biotics, tests)
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(`Specimen type`,ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "biotics", values_to = "sensitivity")|>
na.omit()|>
group_by(biotics, sensitivity)
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(`Specimen type`,ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "biotics", values_to = "sensitivity")|>
na.omit()|>
group_by(biotics, sensitivity)|>
summarise(count = n()) |>
ungroup|>
group_by(biotics)
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(`Specimen type`,ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "biotics", values_to = "sensitivity")|>
na.omit()|>
group_by(biotics, sensitivity)|>
summarise(count = n()) |>
ungroup()|>
group_by(biotics)
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(`Specimen type`,ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "biotics", values_to = "sensitivity")|>
na.omit()|>
group_by(biotics, sensitivity)|>
summarise(count = n()) |>
ungroup()|>
# find the percentages of the counts with reference to the total number of +ves and  -ves
group_by(biotics)
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(`Specimen type`,ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "biotics", values_to = "sensitivity")|>
na.omit()|>
group_by(biotics, sensitivity)|>
summarise(count = n()) |>
ungroup()|>
# find the percentages of the counts with reference to the total number of +ves and  -ves
group_by(biotics)|>
#create a new column called total to get the sum of the counts
mutate(Total = sum(count))
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(`Specimen type`,ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "biotics", values_to = "sensitivity")|>
na.omit()|>
group_by(biotics, sensitivity)|>
summarise(count = n()) |>
ungroup()|>
# find the percentages of the counts with reference to the total number of +ves and  -ves
group_by(biotics)|>
#create a new column called total to get the sum of the counts
mutate(Total = sum(count))
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(`Specimen type`,ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "biotics", values_to = "sensitivity")|>
na.omit()|>
group_by(biotics, sensitivity)|>
summarise(count = n()) |>
ungroup()|>
# find the percentages of the counts with reference to the total number of +ves and  -ves
group_by(biotics)|>
#create a new column called total to get the sum of the counts
mutate(Total = sum(count))|>
ungroup()
#create an object called spec_tests and do a long format on it
spec_tests <- amr_data |>
select(`Specimen type`,ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`)|>
pivot_longer(c(ampicillin, amoxicillin,piperacillin, benzylpenicillin, `ciprofloxacin vi`), names_to = "biotics", values_to = "sensitivity")|>
na.omit()|>
group_by(biotics, sensitivity)|>
summarise(count = n()) |>
ungroup()|>
# find the percentages of the counts with reference to the total number of +ves and  -ves
group_by(biotics)|>
#create a new column called total to get the sum of the counts
mutate(Total = sum(count))|>
ungroup() |>
# we divide the count and total. To find the percentage and put it in a new column called Proportion
#Add round to the nearest whole number
mutate(Proportion = round(count / Total * 100))
ggplot(specs_tests, aes(x = Proportion, y=tests, fill = biotics)) + geom_col()
ggplot(spec_tests, aes(x = Proportion, y=tests, fill = biotics)) + geom_col()
ggplot(spec_tests, aes(x = Proportion, y=biotics, fill = sensitivity)) + geom_col()
ggplot(spec_tests, aes(x = biotics, y=Proportion, fill = sensitivity)) + geom_col()
install.packages("htmltools")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# import data
ideal1 <- read_csv("ideal1.csv")
ideal2 <- read_csv("ideal2.csv")
# Merge Data
ideal3 <- full_join(ideal1, ideal2, by = "CalfID") |>
mutate(CalfSex = recode(CalfSex, "1"="Male" , "2"="Female")) |>
mutate(ReasonsLoss = recode (ReasonsLoss, "6"="Sold" , "7"="Death", "12"="Relocation", "18"="Refusal")) |>
mutate(CADOB = dmy(CADOB)) |>
mutate(VisitDate = dmy(VisitDate)) |>
# Create a new column called visitNo, the divides the VisitID to extract the unique character to give the visit time which is the 4th index
mutate(visitNo = str_sub (VisitID, 4, 5))|>
# group the data by calfID
group_by(CalfID) |>
# Create a new column to display the max and min weights of the calf
mutate(max_weight = max(Weight, na.rm = TRUE)) |># Maximum Weight
mutate(min_weight = min(Weight, na.rm = TRUE)) |># Minimum Weight
# Good practice
ungroup() |>
# Grouping the test using if else
mutate(ManualPCV = ifelse(ManualPCV < 30, "Negative", "Positive")) |>
mutate(Theileria.spp.= ifelse(Theileria.spp. == 1, "Positive", "Negative")) |>
mutate(ELISA_mutans = ifelse(ELISA_mutans == 1, "Positive", "Negative")) |>
mutate(ELISA_parva = ifelse(ELISA_parva == 1, "Positive", "Negative")) |>
#mutate_all(vars(Theileria.spp., ELISA_mutans,ELISA_parva), funs(ifelse(.==1,"Positive, "Negative")))|>
mutate(Q.Strongyle.eggs = ifelse(Q.Strongyle.eggs < 700, "Negative", "Positive"))
install.packages(c("sf","devtools"))
install.packages(c("sf","devtools"))
install.packages(c("sf","devtools"))
library(sf)
#import shapefiles
kenya <- st_read("shapefiles/gadm41_KEN_0.shp")
install.packages(c("sf", "devtools"))
install.packages(c("sf","devtools"))
library(sf)
install.packages(c("sf", "devtools"))
install.packages(c("sf","devtools"))
install.packages(c("sf", "devtools"))
install.packages(c("sf","devtools"))
install.packages(c("sf", "devtools"))
library(sf)
install.packages(c("sf","devtools"))
# import data
kenya <- st_read("shapefiles/gadm41_KEN_0.shp")
install.packages(c("sf", "devtools"))
#install.packages(c("sf","devtools"))
library(sf)
# import data
kenya <- st_read("shapefiles/gadm41_KEN_0.shp")
#install.packages(c("sf","devtools"))
library(sf)
# import data
kenya <- st_read("shapefiles/gadm41_KEN_0.shp")
#install.packages(c("sf","devtools"))
library(sf)
# import data
kenya <- st_read("shapefiles/gadm41_KEN_0.shp")
# plot data
ggplot(kenya) + geom_sf
#install.packages(c("sf","devtools"))
library(sf)
# import data
kenya <- st_read("shapefiles/gadm41_KEN_0.shp")
# plot data
ggplot(kenya) + geom_sf()
# import county data
kenya <- st_read("shapefiles/gadm41_KEN_1.shp")
# plot data
ggplot(kenya) + geom_sf()
# import county data
counties <- st_read("shapefiles/gadm41_KEN_1.shp")
# plot data
ggplot(counties) + geom_sf()
# Install the kenya censors data from Github using devtools
devtools::install_github("Shelmith-Kariuki/rKenyaCensus")
# import county data
counties <- st_read("shapefiles/gadm41_KEN_1.shp")
# plot data
ggplot(counties) + geom_sf()
# Install the kenya censors data from Github using devtools
devtools::install_github("Shelmith-Kariuki/rKenyaCensus")
library(rKenyaCensus)
# import county data
counties <- st_read("shapefiles/gadm41_KEN_1.shp")
# plot data
ggplot(counties) + geom_sf()
# Install the kenya censors data from Github using devtools
devtools::install_github("Shelmith-Kariuki/rKenyaCensus")
library(rKenyaCensus)
# Datacatalogue
census_data <- V1_T2.2 |>
mutate(County = recode (County, "Taita/Taveta"="Taita Taveta" , "Nairobi City"="Nairobi", "Elgeyo/Marakwet"="Elgeyo-Marakwet"))
#
setdiff(counties$NAME_1, census_data$County)
#do a join on the two tables
counties1 <- left_join(counties, census_data$County)
# import county data
counties <- st_read("shapefiles/gadm41_KEN_1.shp")
# plot data
ggplot(counties) + geom_sf()
# Install the kenya censors data from Github using devtools
devtools::install_github("Shelmith-Kariuki/rKenyaCensus")
library(rKenyaCensus)
# Datacatalogue
census_data <- V1_T2.2 |>
mutate(County = recode (County, "Taita/Taveta"="Taita Taveta" , "Nairobi City"="Nairobi", "Elgeyo/Marakwet"="Elgeyo-Marakwet"))
#
setdiff(counties$NAME_1, census_data$County)
# do a join
counties1 <- left_join(counties, census_data$County)
# import county data
counties <- st_read("shapefiles/gadm41_KEN_1.shp")
# plot data
ggplot(counties) + geom_sf()
# Install the kenya censors data from Github using devtools
devtools::install_github("Shelmith-Kariuki/rKenyaCensus")
library(rKenyaCensus)
# Datacatalogue
census_data <- V1_T2.2 |>
mutate(County = recode (County, "Taita/Taveta"="Taita Taveta" , "Nairobi City"="Nairobi", "Elgeyo/Marakwet"="Elgeyo-Marakwet"))
#
setdiff(counties$NAME_1, census_data$County)
# do a join
counties1 <- left_join(counties, census_data, by=c("NAME_1"="County"))
# plot the counties on the map
ggplot(counties1) + geom_sf(aes(fill = Total)) + scale_fill_gradient(low = "#fff7bc", high ="darkred") +theme_void+
ggspatial::annotation_north_arrow(location = "tr")+
ggspatial::annotation_scale()
# import county data
counties <- st_read("shapefiles/gadm41_KEN_1.shp")
# plot data
ggplot(counties) + geom_sf()
# Install the kenya censors data from Github using devtools
devtools::install_github("Shelmith-Kariuki/rKenyaCensus")
library(rKenyaCensus)
# Datacatalogue
census_data <- V1_T2.2 |>
mutate(County = recode (County, "Taita/Taveta"="Taita Taveta" , "Nairobi City"="Nairobi", "Elgeyo/Marakwet"="Elgeyo-Marakwet"))
#
setdiff(counties$NAME_1, census_data$County)
# do a join
counties1 <- left_join(counties, census_data, by=c("NAME_1"="County"))
# plot the counties on the map
ggplot(counties1) + geom_sf(aes(fill = Total)) + scale_fill_gradient(low = "#fff7bc", high ="darkred") +theme_void()+
ggspatial::annotation_north_arrow(location = "tr")+
ggspatial::annotation_scale()
# import county data
counties <- st_read("shapefiles/gadm41_KEN_1.shp")
# plot data
ggplot(counties) + geom_sf()
# Install the kenya censors data from Github using devtools
devtools::install_github("Shelmith-Kariuki/rKenyaCensus")
library(rKenyaCensus)
# Datacatalogue
census_data <- V1_T2.2 |>
mutate(County = recode (County, "Taita/Taveta"="Taita Taveta" , "Nairobi City"="Nairobi", "Elgeyo/Marakwet"="Elgeyo-Marakwet"))
#
setdiff(counties$NAME_1, census_data$County)
# do a join
counties1 <- left_join(counties, census_data, by=c("NAME_1"="County"))
# plot the counties on the map
ggplot(counties1) + geom_sf(aes(fill = Total)) +
scale_fill_gradient(low = "#fff7bc", high ="darkred") +theme_void()+
ggspatial::annotation_north_arrow(location = "tr")+
ggspatial::annotation_scale()
# import county data
counties <- st_read("shapefiles/gadm41_KEN_1.shp")
# plot data
ggplot(counties) + geom_sf()
# Install the kenya censors data from Github using devtools
devtools::install_github("Shelmith-Kariuki/rKenyaCensus")
library(rKenyaCensus)
# Datacatalogue
census_data <- V1_T2.2 |>
mutate(County = recode (County, "Taita/Taveta"="Taita Taveta" , "Nairobi City"="Nairobi", "Elgeyo/Marakwet"="Elgeyo-Marakwet"))
#
setdiff(counties$NAME_1, census_data$County)
# do a join
counties1 <- left_join(counties, census_data, by=c("NAME_1"="County"))
install.packages("ggspatial")
# plot the counties on the map
ggplot(counties1) + geom_sf(aes(fill = Total)) +
scale_fill_gradient(low = "#fff7bc", high ="darkred") +theme_void()+
ggspatial::annotation_north_arrow(location = "tr")+
ggspatial::annotation_scale()
